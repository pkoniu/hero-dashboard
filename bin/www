#!/usr/bin/env node
"use strict";

//todo: do it differently
if (process.env.NODE_ENV !== 'production') {
    process.env.APP_DOMAIN = 'http://localhost:3000/';
    process.env.REDIS_URL = "redis://127.0.0.1:6379/0";
}

let debug = require('debug')('hero-dashboard:server');
let server;

let redis = require('redis');
let client = redis.createClient(process.env.REDIS_URL);
let cacheTTL = 5 * 60 * 60; // 5 hours

let Heroku = require('heroku-client');
let encryptor = require('simple-encryptor')('SUPER_SECRET_KEY');
let heroku = new Heroku({
    token: process.env.HEROKU_API_TOKEN,
    cache: {
        store: require('./../src/cache/redis-cache-store')(client, cacheTTL),
        encryptor: encryptor
    }
});

let herokuRequests = require('./../src/heroku-requests')(heroku);
let cache = require('./../src/cache/in-memory-cache')();
let packageJSON = require(process.cwd() + '/package.json');
let app = require('./../src/app')(herokuRequests, cache, packageJSON);
let http = require('http');

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

console.log('Server listening on port: ', port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}